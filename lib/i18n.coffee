# Generated by CoffeeScript 1.3.3
isTranslatedAttribute = /(.+)Translation$/
getPath = Ember.Handlebars.getPath or Ember.get
pluralForm = CLDR.pluralForm  if typeof CLDR isnt "undefined" and CLDR isnt null
Ember.Logger.warn "CLDR.pluralForm not found. Em.I18n will not support count-based inflection."  unless pluralForm?
findTemplate = (key, setOnMissing) ->
  Ember.assert "You must provide a translation key string, not %@".fmt(key), typeof key is "string"
  locale = I18n.get("currentLocale")
  parts = key.split(".")
  if parts and I18n.get("locales")[parts[0]]
    locale = parts[0]
    key = parts.slice(1).join(".")
  translations = I18n.get("locales")[locale]
  Ember.assert "Dictionary Ember.I18n.locale." + locale + " for locale " + locale + " is not set", translations
  result = translations[key]
  result = translations[key] = I18n.compile("Missing translation: " + key)  unless (if setOnMissing then result? else undefined)
  result = translations[key] = I18n.compile(result)  if (result?) and not $.isFunction(result)
  result

setupTranslateableAttributes = ->
  @_translateableAttributes = []
  for key of this
    path = this[key]
    isTranslatedAttributeMatch = key.match(isTranslatedAttribute)
    if isTranslatedAttributeMatch
      attribute = isTranslatedAttributeMatch[1]
      @_translateableAttributes.pushObject
        attribute: attribute
        path: path

  @translateAttributes()

I18n = Ember.Object.create(
  currentLocale: "en"
  locales: {}
  compile: Handlebars.compile
  translations: {}
  template: (key, count) ->
    if (count?) and (pluralForm?)
      suffix = pluralForm(count)
      interpolatedKey = "%@.%@".fmt(key, suffix)
      result = findTemplate(interpolatedKey, false)
    (if result? then result else result = findTemplate(key, true))

  t: (key, context) ->
    context = {}  unless context?
    template = I18n.template(key, context.count)
    template context

  TranslateableAttributes: Em.Mixin.create(
    didInsertElement: ->
      result = @_super.apply(this, arguments)
      @setupTranslateableAttributes()
      result

    setupTranslateableAttributes: setupTranslateableAttributes
    translateAttributes: (->
      $this = @$()
      translateableAttributes = @_translateableAttributes
      translateableAttributes.forEach (hash) ->
        $this.attr hash.attribute, I18n.t(hash.path)  if hash.attribute and hash.path

    ).observes("Ember.I18n.currentLocale")
  )
  TranslateableProperties: Em.Mixin.create(
    init: ->
      @setupTranslateableAttributes()
      @_super()

    setupTranslateableAttributes: setupTranslateableAttributes
    translateAttributes: (->
      translateableAttributes = @_translateableAttributes
      currentLocale = I18n.get("currentLocale")
      translations = I18n.get("locales")[currentLocale]
      translateableAttributes.forEach ((prop) ->
        @set prop.attribute, translations[prop.path]  if prop.attribute and prop.path
      ), this
    ).observes("Ember.I18n.currentLocale")
  )
)
Em.I18n = I18n
Ember.I18n = I18n
isBinding = /(.+)Binding$/
Handlebars.registerHelper "t", (key, options) ->
  context = this
  attrs = options.hash
  view = options.data.view
  tagName = attrs.tagName or "span"
  delete attrs.tagName

  elementID = "i18n-" + (jQuery.uuid++)
  Em.keys(attrs).forEach (property) ->
    isBindingMatch = property.match(isBinding)
    if isBindingMatch
      propertyName = isBindingMatch[1]
      bindPath = attrs[property]
      currentValue = getPath(context, bindPath)
      attrs[propertyName] = currentValue
      invoker = null
      observer = ->
        newValue = getPath(context, bindPath)
        elem = view.$("#" + elementID)
        if elem.length is 0
          Em.removeObserver context, bindPath, invoker
          return
        attrs[propertyName] = newValue
        elem.html I18n.t(key, attrs)

      invoker = ->
        Em.run.once observer

      Em.addObserver context, bindPath, invoker

  result = "<%@ id=\"%@\">%@</%@>".fmt(tagName, elementID, I18n.t(key, attrs), tagName)
  new Handlebars.SafeString(result)

Handlebars.registerHelper "translateAttr", (options) ->
  attrs = options.hash
  result = []
  Em.keys(attrs).forEach (property) ->
    translatedValue = I18n.t(attrs[property])
    result.push "%@=\"%@\"".fmt(property, translatedValue)

  new Handlebars.SafeString(result.join(" "))

Handlebars.registerHelper "tt", (key, options) ->
  options.hash.keyBinding = key
  options.hash.languageBinding = "Ember.I18n.currentLocale"
  view = Ember.View.extend(
    tagName: "span"
    template: Ember.Handlebars.compile("{{view.formattedContent}}")
    formattedContent: (->
      key = @get("key") or key
      language = @get("language")
      Ember.Handlebars.helpers.t.call this, language + "." + key, options  if key
    ).property("key", "language")
  )
  Ember.Handlebars.helpers.view.call this, view, options